nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho2<- eo2ho %>% filter(str_detect(Postcode,"NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
View(eo2ho2)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho2<- eo2ho %>% filter(str_detect(Postcode,"^NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
#rm(nspl, eo2ho)
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho<- eo2ho %>% filter(str_detect(Postcode,"^NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Popup)
m  # Print the map
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet", "dplyr", "leaflet.extras", "geojsonio", "DT", "sp", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#TODO Remove after testing
#eo2ho<- eo2ho %>% filter(str_detect(Postcode,"^NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#remove the original datasets to free up memory
rm(nspl, eo2ho)
write.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv')
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", ""stringr"")
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr)
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
rm(nspl, eo2ho)
write.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv')
eo2ho_cordinates<.eo2ho_cordinates[1:1000,]
eo2ho_cordinates<-eo2ho_cordinates[1:1000,]
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
eo2ho_cordinates<-read.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv')
eo2ho_cordinates<-read.csv('data/eo2ho_cordinates.csv')
eo2ho_cordinates<-read.csv('data/eo2ho_cordinates.csv')
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Popup)
m  # Print the map
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
write.csv(nspl, 'data/nspl_short.csv')
#load nspl data
nspl <- read.csv(nspl, 'data/nspl_short.csv')
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#load nspl data
nspl <- read.csv(nspl, 'data/nspl_short.csv')
#load nspl data
nspl <- read.csv('data/nspl_short.csv')
#load nspl data
nspl <- read.csv('data/nspl_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#remove the original datasets to free up memory
rm(nspl, eo2ho)
View(eo2ho_cordinates)
#Write the data to a new csv
write.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv')
#Write the data to a new csv
write.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv', row.names = FALSE)
#load nspl data
nspl <- read.csv('data/nspl_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_coordinates$Popup <- paste(eo2ho_coordinates$Name, eo2ho_coordinates$Line.1, eo2ho_coordinates$Line.2, eo2ho_coordinates$Town, eo2ho_coordinates$County, eo2ho_coordinates$Postcode, sep=", ")
#TODO Remove after testing
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Postcode,"^NE"))
#Drop uneeded columns
eo2ho_coordinates <- subset(eo2ho_coordinates, select = c(lat, lng, Popup))
eo2ho_coordinates_NE <- subset(eo2ho_coordinates_NE, select = c(lat, lng, Popup))
#remove the original datasets to free up memory
rm(nspl, eo2ho)
#Write the data to a new csv
write.csv(eo2ho_coordinates,'data/eo2ho_coordinates.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/eo2ho_coordinates_NE.csv', row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#load nspl data
nspl <- read.csv('data/nspl_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_coordinates$Address <- paste(eo2ho_coordinates$Name, eo2ho_coordinates$Line.1, eo2ho_coordinates$Line.2, eo2ho_coordinates$Town, eo2ho_coordinates$County, eo2ho_coordinates$Postcode, sep=", ")
#TODO Remove after testing
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Postcode,"^NE"))
#Drop uneeded columns
eo2ho_coordinates <- subset(eo2ho_coordinates, select = c(lat, lng, Address))
eo2ho_coordinates_NE <- subset(eo2ho_coordinates_NE, select = c(lat, lng, Address))
#remove the original datasets to free up memory
rm(nspl, eo2ho)
#Write the data to a new csv
write.csv(eo2ho_coordinates,'data/eo2ho_coordinates.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/eo2ho_coordinates_NE.csv', row.names = FALSE)
nspl <- read.csv('data/nspl_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, nspl, by="Postcode", all = TRUE)
no_coordinates <- eo2ho_coordinates[lat == '']
no_coordinates <- eo2ho_coordinates[~lat == '']
View(eo2ho_coordinates)
View(eo2ho_coordinates)
no_coordinates <- eo2ho_coordinates[~Name != 'NA']
no_coordinates <- eo2ho_coordinates[eo2ho_coordinates$Name != 'NA']
View(eo2ho_coordinates)
no_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$Name))
View(no_coordinates)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, nspl, by="Postcode", all = TRUE)
#load nspl data
nspl <- read.csv('data/nspl_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, nspl, by="Postcode", all = TRUE)
# Keep only restaurants
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$Name))
#Subset any that didn't match to the NSPL for investigation
no_coordinates<- subset(eo2ho_coordinates, is.na(eo2ho_coordinates$lat))
#Remove those that we couldn't get coordinates for, from the final dataset
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$lat))
#Add address column for popu
eo2ho_coordinates$Address <- paste(eo2ho_coordinates$Name, eo2ho_coordinates$Line.1, eo2ho_coordinates$Line.2, eo2ho_coordinates$Town, eo2ho_coordinates$County, eo2ho_coordinates$Postcode, sep=", ")
#A smaller subset that can be used for testing the leaflet map
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Postcode,"^NE"))
#Drop uneeded columns
eo2ho_coordinates <- subset(eo2ho_coordinates, select = c(lat, lng, Address))
eo2ho_coordinates_NE <- subset(eo2ho_coordinates_NE, select = c(lat, lng, Address))
#remove the original datasets to free up memory
rm(nspl, eo2ho)
#Write the data to a new csv
write.csv(eo2ho_coordinates,'data/eo2ho_coordinates.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/eo2ho_coordinates_NE.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/no_coordinates.csv', row.names = FALSE)
View(no_coordinates)
#load nspl data
nspl <- read.csv('data/nspl_short.csv')
View(no_coordinates)
#Load the onspd dataset which has coordinates for postcodes
onspd <-read.csv('data/ONSPD_FEB_2020_UK.csv')
#Keep only the columns we need
onspd <- subset(onspd, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(onspd) <- c("Postcode", "lat", "lng")
#write to its own csv in case needed again
write.csv(onspd, 'data/onspd_short.csv', row.names = FALSE)
#Load the onspd dataset which has coordinates for postcodes
onspd <-read.csv('data/ONSPD_FEB_2020_UK.csv')
#Keep only the columns we need
onspd <- subset(onspd, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(onspd) <- c("Postcode", "lat", "lng")
#write to its own csv in case needed again
write.csv(onspd, 'data/onspd_short.csv', row.names = FALSE)
View(onspd)
#load onspd data
onspd <- read.csv('data/onspd_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the onspd data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to onspd to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, onspd, by="Postcode", all = TRUE)
# Keep only restaurants
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$Name))
#Subset any that didn't match to the onspd for investigation
no_coordinates<- subset(eo2ho_coordinates, is.na(eo2ho_coordinates$lat))
#Remove those that we couldn't get coordinates for, from the final dataset
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$lat))
#Add address column for popu
eo2ho_coordinates$Address <- paste(eo2ho_coordinates$Name, eo2ho_coordinates$Line.1, eo2ho_coordinates$Line.2, eo2ho_coordinates$Town, eo2ho_coordinates$County, eo2ho_coordinates$Postcode, sep=", ")
#A smaller subset that can be used for testing the leaflet map
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Postcode,"^NE"))
#Drop uneeded columns
eo2ho_coordinates <- subset(eo2ho_coordinates, select = c(lat, lng, Address))
eo2ho_coordinates_NE <- subset(eo2ho_coordinates_NE, select = c(lat, lng, Address))
#remove the original datasets to free up memory
rm(onspd, eo2ho)
#Write the data to a new csv
write.csv(eo2ho_coordinates,'data/eo2ho_coordinates.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/eo2ho_coordinates_NE.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/no_coordinates.csv', row.names = FALSE)
View(no_coordinates)
View(no_coordinates)
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#remove the original datasets to free up memory
rm(onspd, eo2ho)
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
eo2ho_coordinates_NE<-read.csv('data/eo2ho_coordinates_NE.csv')
m <- leaflet(eo2ho_coordinates_NE) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Address)
m  # Print the map
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#load onspd data
onspd <- read.csv('data/onspd_short.csv')
#load onspd data
onspd <- read.csv('data/onspd_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
#eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
eo2ho <- read.csv('https://raw.githubusercontent.com/hmrc/eat-out-to-help-out-establishments/master/data/participating-establishments/restaurants.csv')
#Load the Eat Out To Help Out (EO2HO) data
#eo2ho <- read.csv('data/participating-establishments/restaurants.csv'
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#load onspd data
onspd <- read.csv('data/onspd_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
#eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Load directly from github
eo2ho <- read.csv('https://raw.githubusercontent.com/hmrc/eat-out-to-help-out-establishments/master/data/participating-establishments/restaurants.csv')
#Format the postcodes to match the onspd data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to onspd to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, onspd, by="Postcode", all = TRUE)
# Keep only restaurants
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$Name))
#Subset any that didn't match to the onspd for investigation
no_coordinates<- subset(eo2ho_coordinates, is.na(eo2ho_coordinates$lat))
#Remove those that we couldn't get coordinates for, from the final dataset
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$lat))
#Add address column for popu
eo2ho_coordinates$Address <- paste(eo2ho_coordinates$Name, eo2ho_coordinates$Line.1, eo2ho_coordinates$Line.2, eo2ho_coordinates$Town, eo2ho_coordinates$County, eo2ho_coordinates$Postcode, sep=", ")
#A smaller subset that can be used for testing the leaflet map
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Postcode,"^NE"))
#Drop uneeded columns
eo2ho_coordinates <- subset(eo2ho_coordinates, select = c(lat, lng, Address))
eo2ho_coordinates_NE <- subset(eo2ho_coordinates_NE, select = c(lat, lng, Address))
#remove the original datasets to free up memory
rm(onspd, eo2ho)
#Write the data to a new csv
write.csv(eo2ho_coordinates,'data/eo2ho_coordinates.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/eo2ho_coordinates_NE.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/no_coordinates.csv', row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
eo2ho_coordinates_NE<-read.csv('data/eo2ho_coordinates_NE.csv')
m <- leaflet(eo2ho_coordinates_NE) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Address)
m  # Print the map
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load directly from github
eo2ho <- read.csv('https://raw.githubusercontent.com/hmrc/eat-out-to-help-out-establishments/master/data/participating-establishments/restaurants.csv')
View(eo2ho)
onspd <- read.csv('data/onspd_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
#eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Load directly from github
eo2ho <- read.csv('https://raw.githubusercontent.com/hmrc/eat-out-to-help-out-establishments/master/data/participating-establishments/restaurants.csv')
#Format the postcodes to match the onspd data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to onspd to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, onspd, by="Postcode", all = TRUE)
# Keep only restaurants
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$Name))
#Subset any that didn't match to the onspd for investigation
no_coordinates<- subset(eo2ho_coordinates, is.na(eo2ho_coordinates$lat))
#Remove those that we couldn't get coordinates for, from the final dataset
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$lat))
#Add address column for popu
eo2ho_coordinates$Address <- paste(eo2ho_coordinates$Name, eo2ho_coordinates$Line.1, eo2ho_coordinates$Line.2, eo2ho_coordinates$Town, eo2ho_coordinates$County, eo2ho_coordinates$Postcode, sep=", ")
#A smaller subset that can be used for testing the leaflet map
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Postcode,"^NE"))
#ice cream
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Name,"ice"))
#ice cream
eo2ho_coordinates_ICE<- eo2ho_coordinates %>% filter(str_detect(Name,"ice"))
eo2ho_coordinates_ICE<- eo2ho_coordinates %>% filter(str_detect(Name,"ice"))
#Drop uneeded columns
eo2ho_coordinates <- subset(eo2ho_coordinates, select = c(lat, lng, Address))
eo2ho_coordinates_NE <- subset(eo2ho_coordinates_NE, select = c(lat, lng, Address))
eo2ho_coordinates_ICE <- subset(eo2ho_coordinates_ICE, select = c(lat, lng, Address))
#remove the original datasets to free up memory
rm(onspd, eo2ho)
#Write the data to a new csv
write.csv(eo2ho_coordinates,'data/eo2ho_coordinates.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/eo2ho_coordinates_NE.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_NE,'data/no_coordinates.csv', row.names = FALSE)
write.csv(eo2ho_coordinates_ICE,'data/no_coordinates_ICE.csv', row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
onspd <- read.csv('data/onspd_short.csv')
#Load the Eat Out To Help Out (EO2HO) data
#eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Load directly from github
eo2ho <- read.csv('https://raw.githubusercontent.com/hmrc/eat-out-to-help-out-establishments/master/data/participating-establishments/restaurants.csv')
#Format the postcodes to match the onspd data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to onspd to get a cordinate for each establishment
eo2ho_coordinates <- merge(eo2ho, onspd, by="Postcode", all = TRUE)
# Keep only restaurants
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$Name))
#Subset any that didn't match to the onspd for investigation
no_coordinates<- subset(eo2ho_coordinates, is.na(eo2ho_coordinates$lat))
#Remove those that we couldn't get coordinates for, from the final dataset
eo2ho_coordinates <- subset(eo2ho_coordinates, !is.na(eo2ho_coordinates$lat))
#Add address column for popu
eo2ho_coordinates$Address <- paste(eo2ho_coordinates$Name, eo2ho_coordinates$Line.1, eo2ho_coordinates$Line.2, eo2ho_coordinates$Town, eo2ho_coordinates$County, eo2ho_coordinates$Postcode, sep=", ")
#A smaller subset that can be used for testing the leaflet map
eo2ho_coordinates_NE<- eo2ho_coordinates %>% filter(str_detect(Postcode,"^NE"))
