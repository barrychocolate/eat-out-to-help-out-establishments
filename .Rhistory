knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet", "dplyr", "leaflet.extras", "geojsonio", "DT", "sp", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#remove the original datasets to free up memory
rm(nspl, eo2ho)
#TODO remove this after testing
eo2ho_cordinates <-eo2ho_cordinates[1:1000]
#TODO remove this after testing
eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#TODO remove this after testing
eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet", "dplyr", "leaflet.extras", "geojsonio", "DT", "sp", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat)
View(eo2ho_cordinates)
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Name)
m  # Print the map
View(eo2ho_cordinates)
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=paste(~Name, ~Line.1, ~Line.2, ~Town, ~County, ~Postcode, sep="\n"))
m  # Print the map
#Add address column for popu
eo2ho_cordinates$popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep="\n")
View(eo2ho_cordinates)
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep="\n")
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(Postcode,lat, long, Popup))
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(Postcode,lat, lng, Popup))
View(eo2ho_cordinates)
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Popup)
m  # Print the map
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=",")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Popup)
m  # Print the map
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet", "dplyr", "leaflet.extras", "geojsonio", "DT", "sp", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet", "dplyr", "leaflet.extras", "geojsonio", "DT", "sp", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet", "dplyr", "leaflet.extras", "geojsonio", "DT", "sp", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho2<- eo2ho %>% filter(str_detect(Postcode,"NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
rm(nspl, eo2ho)
View(eo2ho2)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho2<- eo2ho %>% filter(str_detect(Postcode,"^NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#TODO remove this after testing
#eo2ho_cordinates <-eo2ho_cordinates[1:1000,]
#remove the original datasets to free up memory
#rm(nspl, eo2ho)
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho<- eo2ho %>% filter(str_detect(Postcode,"^NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Popup)
m  # Print the map
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet", "dplyr", "leaflet.extras", "geojsonio", "DT", "sp", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
#TODO Remove after testing
#eo2ho<- eo2ho %>% filter(str_detect(Postcode,"^NE"))
#Join EO2HO data to NSPL to get a cordinate for each establishment
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
#Add address column for popu
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
#Drop uneeded columns
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
#remove the original datasets to free up memory
rm(nspl, eo2ho)
write.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv')
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
#Load the NSPL dataset which has cordinates for postcodes
#This can be downloaded freely from
#https://geoportal.statistics.gov.uk/datasets/national-statistics-postcode-lookup-may-2020
nspl <-read.csv('data/NSPL_MAY_2020_UK.csv')
#Keep onlt the columns we need
nspl <- subset(nspl, select = c(pcds,lat, long))
#Rename pcds colum to make join to EO2HO easier
names(nspl) <- c("Postcode", "lat", "lng")
#Load the Eat Out To Help Out (EO2HO) data
eo2ho <- read.csv('data/participating-establishments/restaurants.csv')
#Format the postcodes to match the NSPL data
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", ""stringr"")
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr)
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("dplyr", "stringr")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
eo2ho$Postcode<- toupper(str_replace_all(eo2ho$Postcode, " ", ""))
eo2ho$Postcode<-paste(substr(eo2ho$Postcode, 1,nchar(eo2ho$Postcode)-3), substr(eo2ho$Postcode,nchar(eo2ho$Postcode)-2,nchar(eo2ho$Postcode)), sep = " ", collapse = NULL)
eo2ho_cordinates <- merge(eo2ho, nspl, by="Postcode")
eo2ho_cordinates$Popup <- paste(eo2ho_cordinates$Name, eo2ho_cordinates$Line.1, eo2ho_cordinates$Line.2, eo2ho_cordinates$Town, eo2ho_cordinates$County, eo2ho_cordinates$Postcode, sep=", ")
eo2ho_cordinates <- subset(eo2ho_cordinates, select = c(lat, lng, Popup))
rm(nspl, eo2ho)
write.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv')
eo2ho_cordinates<.eo2ho_cordinates[1:1000,]
eo2ho_cordinates<-eo2ho_cordinates[1:1000,]
knitr::opts_chunk$set(echo = TRUE)
#Check if the required packages are installed, if not install them
list_of_packages <- c("leaflet")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
#Load required packages
lapply(list_of_packages, library, character.only = TRUE)
eo2ho_cordinates<-read.csv(eo2ho_cordinates,'data/eo2ho_cordinates.csv')
eo2ho_cordinates<-read.csv('data/eo2ho_cordinates.csv')
eo2ho_cordinates<-read.csv('data/eo2ho_cordinates.csv')
m <- leaflet(eo2ho_cordinates) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~lng, lat=~lat, popup=~Popup)
m  # Print the map
